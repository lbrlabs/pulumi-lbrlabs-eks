// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Eks
{
    [EksResourceType("lbrlabs-eks:index:AutoscaledNodeGroup")]
    public partial class AutoscaledNodeGroup : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// Create a AutoscaledNodeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutoscaledNodeGroup(string name, AutoscaledNodeGroupArgs args, ComponentResourceOptions? options = null)
            : base("lbrlabs-eks:index:AutoscaledNodeGroup", name, args ?? new AutoscaledNodeGroupArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class AutoscaledNodeGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AMI family for the node group.
        /// </summary>
        [Input("amiFamily")]
        public Input<string>? AmiFamily { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations to apply to the node group.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Disk size for the node group.
        /// </summary>
        [Input("diskSize", required: true)]
        public Input<string> DiskSize { get; set; } = null!;

        [Input("disruption")]
        public Input<Inputs.DisruptionConfigArgs>? Disruption { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Node role for the node group.
        /// </summary>
        [Input("nodeRole", required: true)]
        public Input<string> NodeRole { get; set; } = null!;

        [Input("requirements", required: true)]
        private InputList<Inputs.RequirementArgs>? _requirements;

        /// <summary>
        /// List of requirements for the node group.
        /// </summary>
        public InputList<Inputs.RequirementArgs> Requirements
        {
            get => _requirements ?? (_requirements = new InputList<Inputs.RequirementArgs>());
            set => _requirements = value;
        }

        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// List of security group selector terms for the node group.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnetIds", required: true)]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// List of subnet selector terms for the node group.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("taints")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.TaintArgs>? _taints;

        /// <summary>
        /// Optional node taints.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.TaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.TaintArgs>());
            set => _taints = value;
        }

        public AutoscaledNodeGroupArgs()
        {
            DiskSize = "20Gi";
        }
        public static new AutoscaledNodeGroupArgs Empty => new AutoscaledNodeGroupArgs();
    }
}
