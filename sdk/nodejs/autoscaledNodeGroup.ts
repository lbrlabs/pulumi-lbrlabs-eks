// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

import * as pulumiKubernetes from "@pulumi/kubernetes";

export class AutoscaledNodeGroup extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'lbrlabs-eks:index:AutoscaledNodeGroup';

    /**
     * Returns true if the given object is an instance of AutoscaledNodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoscaledNodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscaledNodeGroup.__pulumiType;
    }


    /**
     * Create a AutoscaledNodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoscaledNodeGroupArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.diskSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSize'");
            }
            if ((!args || args.nodeRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeRole'");
            }
            if ((!args || args.requirements === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requirements'");
            }
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["amiFamily"] = args ? args.amiFamily : undefined;
            resourceInputs["amiId"] = args ? args.amiId : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["diskSize"] = (args ? args.diskSize : undefined) ?? "20Gi";
            resourceInputs["disruption"] = args ? (args.disruption ? pulumi.output(args.disruption).apply(inputs.disruptionConfigArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["nodeRole"] = args ? args.nodeRole : undefined;
            resourceInputs["requirements"] = args ? args.requirements : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
        } else {
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscaledNodeGroup.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a AutoscaledNodeGroup resource.
 */
export interface AutoscaledNodeGroupArgs {
    /**
     * AMI family for the node group.
     */
    amiFamily?: pulumi.Input<string>;
    /**
     * AMI ID for the node group.
     */
    amiId?: pulumi.Input<string>;
    /**
     * Annotations to apply to the node group.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Disk size for the node group.
     */
    diskSize: pulumi.Input<string>;
    disruption?: pulumi.Input<inputs.DisruptionConfigArgs>;
    /**
     * Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Node role for the node group.
     */
    nodeRole: pulumi.Input<string>;
    /**
     * List of requirements for the node group.
     */
    requirements: pulumi.Input<pulumi.Input<inputs.RequirementArgs>[]>;
    /**
     * List of security group selector terms for the node group.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of subnet selector terms for the node group.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional node taints.
     */
    taints?: pulumi.Input<pulumi.Input<pulumiKubernetes.types.input.core.v1.Taint>[]>;
}
