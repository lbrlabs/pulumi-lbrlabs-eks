// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-lbrlabs-eks/sdk/go/eks/internal"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/eks"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AttachedFargateProfile struct {
	pulumi.ResourceState

	Profile eks.FargateProfileOutput `pulumi:"profile"`
	Role    iam.RoleOutput           `pulumi:"role"`
}

// NewAttachedFargateProfile registers a new resource with the given unique name, arguments, and options.
func NewAttachedFargateProfile(ctx *pulumi.Context,
	name string, args *AttachedFargateProfileArgs, opts ...pulumi.ResourceOption) (*AttachedFargateProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.Selectors == nil {
		return nil, errors.New("invalid value for required argument 'Selectors'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttachedFargateProfile
	err := ctx.RegisterRemoteComponentResource("lbrlabs-eks:index:AttachedFargateProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type attachedFargateProfileArgs struct {
	// The name of the cluster to assign the fargate profile to.
	ClusterName string                       `pulumi:"clusterName"`
	Selectors   []eks.FargateProfileSelector `pulumi:"selectors"`
	// The subnet IDs to use for the fargate profile.
	SubnetIds []string `pulumi:"subnetIds"`
	// Key-value map for tags to apply to Fargate Profile.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AttachedFargateProfile resource.
type AttachedFargateProfileArgs struct {
	// The name of the cluster to assign the fargate profile to.
	ClusterName pulumi.StringInput
	Selectors   eks.FargateProfileSelectorArrayInput
	// The subnet IDs to use for the fargate profile.
	SubnetIds pulumi.StringArrayInput
	// Key-value map for tags to apply to Fargate Profile.
	Tags pulumi.StringMapInput
}

func (AttachedFargateProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachedFargateProfileArgs)(nil)).Elem()
}

type AttachedFargateProfileInput interface {
	pulumi.Input

	ToAttachedFargateProfileOutput() AttachedFargateProfileOutput
	ToAttachedFargateProfileOutputWithContext(ctx context.Context) AttachedFargateProfileOutput
}

func (*AttachedFargateProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedFargateProfile)(nil)).Elem()
}

func (i *AttachedFargateProfile) ToAttachedFargateProfileOutput() AttachedFargateProfileOutput {
	return i.ToAttachedFargateProfileOutputWithContext(context.Background())
}

func (i *AttachedFargateProfile) ToAttachedFargateProfileOutputWithContext(ctx context.Context) AttachedFargateProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedFargateProfileOutput)
}

// AttachedFargateProfileArrayInput is an input type that accepts AttachedFargateProfileArray and AttachedFargateProfileArrayOutput values.
// You can construct a concrete instance of `AttachedFargateProfileArrayInput` via:
//
//	AttachedFargateProfileArray{ AttachedFargateProfileArgs{...} }
type AttachedFargateProfileArrayInput interface {
	pulumi.Input

	ToAttachedFargateProfileArrayOutput() AttachedFargateProfileArrayOutput
	ToAttachedFargateProfileArrayOutputWithContext(context.Context) AttachedFargateProfileArrayOutput
}

type AttachedFargateProfileArray []AttachedFargateProfileInput

func (AttachedFargateProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachedFargateProfile)(nil)).Elem()
}

func (i AttachedFargateProfileArray) ToAttachedFargateProfileArrayOutput() AttachedFargateProfileArrayOutput {
	return i.ToAttachedFargateProfileArrayOutputWithContext(context.Background())
}

func (i AttachedFargateProfileArray) ToAttachedFargateProfileArrayOutputWithContext(ctx context.Context) AttachedFargateProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedFargateProfileArrayOutput)
}

// AttachedFargateProfileMapInput is an input type that accepts AttachedFargateProfileMap and AttachedFargateProfileMapOutput values.
// You can construct a concrete instance of `AttachedFargateProfileMapInput` via:
//
//	AttachedFargateProfileMap{ "key": AttachedFargateProfileArgs{...} }
type AttachedFargateProfileMapInput interface {
	pulumi.Input

	ToAttachedFargateProfileMapOutput() AttachedFargateProfileMapOutput
	ToAttachedFargateProfileMapOutputWithContext(context.Context) AttachedFargateProfileMapOutput
}

type AttachedFargateProfileMap map[string]AttachedFargateProfileInput

func (AttachedFargateProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachedFargateProfile)(nil)).Elem()
}

func (i AttachedFargateProfileMap) ToAttachedFargateProfileMapOutput() AttachedFargateProfileMapOutput {
	return i.ToAttachedFargateProfileMapOutputWithContext(context.Background())
}

func (i AttachedFargateProfileMap) ToAttachedFargateProfileMapOutputWithContext(ctx context.Context) AttachedFargateProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedFargateProfileMapOutput)
}

type AttachedFargateProfileOutput struct{ *pulumi.OutputState }

func (AttachedFargateProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedFargateProfile)(nil)).Elem()
}

func (o AttachedFargateProfileOutput) ToAttachedFargateProfileOutput() AttachedFargateProfileOutput {
	return o
}

func (o AttachedFargateProfileOutput) ToAttachedFargateProfileOutputWithContext(ctx context.Context) AttachedFargateProfileOutput {
	return o
}

func (o AttachedFargateProfileOutput) Profile() eks.FargateProfileOutput {
	return o.ApplyT(func(v *AttachedFargateProfile) eks.FargateProfileOutput { return v.Profile }).(eks.FargateProfileOutput)
}

func (o AttachedFargateProfileOutput) Role() iam.RoleOutput {
	return o.ApplyT(func(v *AttachedFargateProfile) iam.RoleOutput { return v.Role }).(iam.RoleOutput)
}

type AttachedFargateProfileArrayOutput struct{ *pulumi.OutputState }

func (AttachedFargateProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachedFargateProfile)(nil)).Elem()
}

func (o AttachedFargateProfileArrayOutput) ToAttachedFargateProfileArrayOutput() AttachedFargateProfileArrayOutput {
	return o
}

func (o AttachedFargateProfileArrayOutput) ToAttachedFargateProfileArrayOutputWithContext(ctx context.Context) AttachedFargateProfileArrayOutput {
	return o
}

func (o AttachedFargateProfileArrayOutput) Index(i pulumi.IntInput) AttachedFargateProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttachedFargateProfile {
		return vs[0].([]*AttachedFargateProfile)[vs[1].(int)]
	}).(AttachedFargateProfileOutput)
}

type AttachedFargateProfileMapOutput struct{ *pulumi.OutputState }

func (AttachedFargateProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachedFargateProfile)(nil)).Elem()
}

func (o AttachedFargateProfileMapOutput) ToAttachedFargateProfileMapOutput() AttachedFargateProfileMapOutput {
	return o
}

func (o AttachedFargateProfileMapOutput) ToAttachedFargateProfileMapOutputWithContext(ctx context.Context) AttachedFargateProfileMapOutput {
	return o
}

func (o AttachedFargateProfileMapOutput) MapIndex(k pulumi.StringInput) AttachedFargateProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttachedFargateProfile {
		return vs[0].(map[string]*AttachedFargateProfile)[vs[1].(string)]
	}).(AttachedFargateProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedFargateProfileInput)(nil)).Elem(), &AttachedFargateProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedFargateProfileArrayInput)(nil)).Elem(), AttachedFargateProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedFargateProfileMapInput)(nil)).Elem(), AttachedFargateProfileMap{})
	pulumi.RegisterOutputType(AttachedFargateProfileOutput{})
	pulumi.RegisterOutputType(AttachedFargateProfileArrayOutput{})
	pulumi.RegisterOutputType(AttachedFargateProfileMapOutput{})
}
