// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-lbrlabs-eks/sdk/go/eks/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamRoleMapping struct {
	pulumi.ResourceState
}

// NewIamRoleMapping registers a new resource with the given unique name, arguments, and options.
func NewIamRoleMapping(ctx *pulumi.Context,
	name string, args *IamRoleMappingArgs, opts ...pulumi.ResourceOption) (*IamRoleMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Groups == nil {
		return nil, errors.New("invalid value for required argument 'Groups'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamRoleMapping
	err := ctx.RegisterRemoteComponentResource("lbrlabs-eks:index:IamRoleMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type iamRoleMappingArgs struct {
	// An array of groups to map the IAM role to.
	Groups []string `pulumi:"groups"`
	// The arn of the role to map to a Kubernetes group.
	RoleArn string `pulumi:"roleArn"`
	// The username to assign to the rolemapping.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a IamRoleMapping resource.
type IamRoleMappingArgs struct {
	// An array of groups to map the IAM role to.
	Groups pulumi.StringArrayInput
	// The arn of the role to map to a Kubernetes group.
	RoleArn pulumi.StringInput
	// The username to assign to the rolemapping.
	Username pulumi.StringInput
}

func (IamRoleMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamRoleMappingArgs)(nil)).Elem()
}

type IamRoleMappingInput interface {
	pulumi.Input

	ToIamRoleMappingOutput() IamRoleMappingOutput
	ToIamRoleMappingOutputWithContext(ctx context.Context) IamRoleMappingOutput
}

func (*IamRoleMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**IamRoleMapping)(nil)).Elem()
}

func (i *IamRoleMapping) ToIamRoleMappingOutput() IamRoleMappingOutput {
	return i.ToIamRoleMappingOutputWithContext(context.Background())
}

func (i *IamRoleMapping) ToIamRoleMappingOutputWithContext(ctx context.Context) IamRoleMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleMappingOutput)
}

type IamRoleMappingOutput struct{ *pulumi.OutputState }

func (IamRoleMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamRoleMapping)(nil)).Elem()
}

func (o IamRoleMappingOutput) ToIamRoleMappingOutput() IamRoleMappingOutput {
	return o
}

func (o IamRoleMappingOutput) ToIamRoleMappingOutputWithContext(ctx context.Context) IamRoleMappingOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleMappingInput)(nil)).Elem(), &IamRoleMapping{})
	pulumi.RegisterOutputType(IamRoleMappingOutput{})
}
